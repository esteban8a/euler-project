# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.

defmodule Problem1 do
	def calculate(counter, multiple1, multiple2, limit, multiples \\ []) do	
		cond do
			counter <= 0 or counter == limit ->
				multiples
			counter < limit and ((rem(counter, multiple1) == 0) or ((rem(counter, multiple2) == 0))) ->
				calculate(counter + 1, multiple1, multiple2, limit, [counter] ++ multiples)
			true ->
				calculate(counter + 1, multiple1, multiple2, limit, multiples)
		end
		
	end
	
	def sum_array(numbers_array \\ []) do
		Enum.reduce(numbers_array, 0, fn x, acc -> x + acc end)
	end
	
	
	def calculate_v8(multiple1, multiple2, limit) do
		Enum.reduce 1..limit-1, 0, fn(number, sum) -> 
				cond do
					rem(number, multiple1) == 0 or rem(number, multiple2) == 0 ->
						sum + number
					true ->
						sum	
				end	
			end
	end
		
end


#results1 =  Problem1.calculate(1, 3, 5, 10, [])
#results2 =  Problem1.calculate(1, 3, 5, 1000, [])

#IO.puts("The result #1 is " <> to_string(Problem1.sum_array(results1))) 
#IO.puts("The result #2 is " <> to_string(Problem1.sum_array(results2)))

IO.puts("V8 is " <> to_string(Problem1.calculate_v8(3, 5, 1000)))