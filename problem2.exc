# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the # first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

defmodule Problem2 do
	
	def calculate(limit, fibonacci \\ [1, 2]) do
		if(Enum.at(fibonacci, length(fibonacci) - 1) >= limit) do
			sum_items(fibonacci, limit)
		else
			sum_value = Enum.at(fibonacci, length(fibonacci) - 1) + Enum.at(fibonacci, length(fibonacci) - 2)
			fibonacci = fibonacci ++ [sum_value]
			calculate(limit, fibonacci)
		end
	end
	
	def sum_items(fibonacci, limit) do
		Enum.reduce fibonacci, 0, fn(x,acc) ->
			cond do
				rem(x,2) == 0 and x < limit -> x + acc
				true -> acc
			end
		end
	end
	
end

IO.puts "Final number is: " <> to_string(Problem2.calculate(4_000_000))
